Pre-requisites:
---------------
1. disable selinux
vim /etc/sysconfig/selinux
or
sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux && cat /etc/sysconfig/selinux

2. set the dns for each node in /etc/hosts
Set DNS entries in /etc/hosts:
192.168.10.50 kubeM
192.168.10.51 kube1
192.168.10.52 kube2

3. Set net bridge
cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

4. Reload sysctl
sysctl --system

5. swapoff -a
vim /etc/fstab

6. reboot

Docker Installation:
--------------------
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum update -y
yum install -y yum-utils device-mapper-persistent-data lvm2 -y
docker version
yum remove docker-c* -y
sudo yum --showduplicates list docker-ce
sudo yum install docker-ce-18.06.1.ce-3.el7 -y
systemctl enable docker
systemctl start docker

Installing kubelet, kubeadm, kubectl:
-------------------------------------
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

yum install -y kubelet kubeadm kubectl
systemctl enable kubelet && systemctl start kubelet

C-group fixing:
---------------
docker info | grep -i cgroup


Initialize the kubernetes cluster:
----------------------------------
kubeadm init --apiserver-advertise-address=192.168.10.50 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.244.0.0/12

Become non-root user now, and manage the cluster using kubectl:
---------------------------------------------------------------
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Creating the dashboard:
-----------------------
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

kubectl -n kube-system edit service kubernetes-dashboard
change from ClusterIP to NodePort
kubectl describe services kubernetes-dashboard --namespace=kube-system
kubectl -n kube-system get secret
kubectl -n kube-system describe secret namespace-contoller-token-xyxyx
now use this token to login to the cluster IP

Admin Account for Kubernetes dashboard:
---------------------------------------
kubectl create serviceaccount cluster-admin-dashboard-sa
kubectl create clusterrolebinding cluster-admin-dashboard-sa --clusterrole=cluster-admin --serviceaccount=default:cluster-admin-dashboard-sa
kubectl get secret | grep cluster-admin-dashboard-sa
kubectl describe secret cluster-admin-dashboard-sa-token-6xm8l

Findings:
---------
If you use recommend yaml to deploy dashboard, you should only access your dashboard by https , and you should generete you certs, refer to guide then , you can run kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' to visit dashboard on "http://localhost:8001/ui" . This page need to login use token, generete refer to this page. Also you can add NodePort to you yaml and access to it use <nodeip>:<port>

if you deploy use http alternative method, you can only access your dashboard by nodeip:port, remeber to add it to yaml first!! After deploy, you should also generate you token and add header Authorization: Bearer <token> for every request.